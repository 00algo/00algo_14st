//2105 민준우 데이터 분석 프로그램 


#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <stdlib.h>
#include <time.h> //완벽한 랜덤값을 위해 시간으로 난수표의 시드값을 정함
#include <math.h> // 사다리의 조합 경우의 수를 위해 pow를 쓰기 위해서


int in1();//레인 수 결정 
int in2(int n); // 사다리 수 최댓값 
int in3(int n); // 당첨 위치 결정
int* make(int n,int m); // 사다리 생성(배열)
int over(int n, int m); //경우의 수 제한 함수
int* sadari(int n,int m,int l);//사다리 따라 내려가기(올라가기)  
int analysis(int n,int m,int l); //데이터 분석 




int main()
{
	int lane,m,l,k;//lane은레인 수, m은사다리의 최대 갯수, l은 당첨 위치, k는 도움말 여부 
	printf("데이터 분석 프로그램 2105 민준우\n\n");
	printf("이 프로그램은 사다리타기의 경우의 수를 통계내는 프로그램입니다.\n");
	printf("큰 수를 넣을수록 시간이 오래 걸릴 수 있습니다.\n\n\n");
	printf("다음으로 넘어가려면 임의의 키를 입력하세요.");
	getchar();
	
	
	fflush(stdin); 
	system("cls");
	lane = in1();// 총 레인 수 
	m = in2(lane); // 사다리 수 제한 
	l = in3(lane)-1;//상품 위치 
	system("cls");
	printf("항목수 : %d, 사다리수 제한 : %d, 시작 위치 : %d\n", lane,m,l+1);
	srand(time(0)); //완벽한 랜덤을 위한 시드값 설정
	analysis(lane,m,l);
	
	printf("\n\n종료하시려면 임의의 키, 도움말을 보시려면 1을 입력하세요.\n");
	printf("입력 : ");
	scanf("%d",&k);
	if(k==1){ //도움말 
		SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ), 14); // 강조하기 위해서 색깔 바꾸기 
		printf("※※※※※※※※※※※※※※※※※※※※※※※도움말※※※※※※※※※※※※※※※※※※※※※※※\n\n");
		SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ), 7);
		printf("위의 결과로는 당첨인 %d번 레인과 같은 레인인 %d번 레인이 가장확률이 높습니다.\n",l+1,l+1);
		printf("계속 해보시면 알겠지만 당첨레인과 같은 레인을 출발지로 고르는 것이 가장 확률이 높습니다.\n");
		printf("그리고 당첨레인에서 양쪽으로 멀어질수록 확률이 감소합니다.\n");
		printf("이런 그래프를 정규분포 그래프라고 합니다.\n");
		printf("\n\n하지만 위에 보이시는 그래프는 정규분포 그래프입니다.\n");
		printf("그래서 사다리 수의 최댓값을 크면 크게 할수록 편차가 적어져\n");
		printf("완만한 그래프를 얻을 수 있고 각각의 라인마다 확률이 비슷해지게 됩니다.\n");
		SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ), 4);
		printf("\n\n※※※※※※※※※※※※※※※※※※※※※※※결론※※※※※※※※※※※※※※※※※※※※※※※\n\n");
		SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ), 7);
		printf("1.당첨 레인과 같은 레인이 확률이 가장 높다.\n");
		printf("2.만약 당첨 레인과 같은 레인을 고르지 못한다면 최대한 가까운 레인을 골라라\n");
		printf("3.사다리의 최댓값이 매우 커지면 확률이 거의 비슷한 완만한 그래프가 그려지므로 아무 레인을 선택해도 상관이 거의없다.\n");
	}
	//임의의 키를 하나 입력한 후 프로그램 종료되도록 처리함. 
	fflush(stdin);
	printf("\n종료하시려면 임의의 키를 입력하세요.\n");
	getchar();
	
	return 0;
}

int in1() 
{
	int x;
	char choice[80]; 
	char *end; 
	do {
		system("cls");
		printf("2부터 21까지 수 중에 레인의 수를 선택하시오.\n");
		printf("입력 : ");
		gets(choice);
		fflush(stdin);
		x = strtol(choice, &end, 10);
	} while(x>21 || x<2);
	return x;
}
int in2(int n) 
{
	int x;
	char choice[80]; 
	char *end; 
	do {
		system("cls");
		printf("1부터 5000까지 수 중에 사다리 수 최댓값을 선택하시오.\n");
		printf("※사다리 수가 아닌 사다리 수의 최댓값입니다.\n");
		printf("%d개의 레인에 1개~입력한 수의 사다리 수 까지를 모두 시뮬레이션 합니다.\n",n);
		printf("수가 크면 클 수록 시간이 오래걸리지만 정확도가 높아집니다.\n\n");
		printf("입력 : ");
		gets(choice);
		fflush(stdin);
		x = strtol(choice, &end, 10);
	} while(x>5000 || x<1);
	return x;
}
int in3(int n) 
{
	int x;
	char choice[80]; 
	char *end;
	do {
		system("cls");
		printf("항목 수(1~%d) 중 당첨의 위치를 입력하세요.\n",n);
		printf("입력 : ");
		gets(choice);
		fflush(stdin);
		x = strtol(choice, &end, 10);
	} while(x>n || x<1);
	return x;
}
int* make(int lane,int m){//사다리를 만드는 함수 
	int num;//사다리 숫자 
	int S[10000];//사다리 배열 
	for(int i=1;i<=m;i++){
		num = rand()%(lane-1); // 사다리 생성 
		S[i]=num; // 사다리 배열에 넣기 
	}
	return S;//배열 리턴 
}


int over(int lane, int m){
	int a;
	a = pow(lane-1,m);//시뮬레이션당 시뮬레이션 횟수
	if (a>10000000||a<0){ // 너무 크거나 오버플로우 처리 
		a=15000;	
	}
	return a;
} 


int* sadari(int lane,int m,int l){
	int b,pro_1,pro_2;//b는 현재 사다리 위치, pro_1은 진행상황(%), pro_2는 진행도 비교 
	b=l/1; 
	int result[10000]; //결과 배열 
	for (int k=1;k<=m;k++){//사다리  수 만큼 반복 
		for(int j=1;j<=over(lane,k);j++){ // 해당 사다리 수에서 경우의 수 만큼 반복 
			int* nums = make(lane,k); // 사다리 받아옴 
			b=l; // l값 원상복구 
			for(int i=1;i<=k;i++){//출력 담당 
				if (nums[i]==b-1){ //왼쪽 으로 내려가기 
					b=b-1;
				}
				else if(nums[i]==b)  //오른쪽으로 내려가기 
				{
					b=b+1;
				}
			}
			result[b]=result[b]+1;//결과 업데이트 
		}
		pro_1=k*100/m; // 진행도
		if (pro_1!=pro_2){ // 진행도가 달라지면 출력 
			system("cls");
			printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t%d%%완료",pro_1);//진행도 출력
		pro_2=pro_1/1;//진행도 업데이트 
		}
	}
	system("cls");
	return result; //결과 배열값 리턴 
}

int analysis(int lane,int m,int l){ // 분석하는 함수 
	int sum,max_i=0; //sum은 시뮬레이션 총 횟수, max_i는 확률이 가장 높은 레인 
	float max=0; // max는 각 레인의 확률  
	int* last = sadari(lane,m,l); //결괏값 받아오기 
	float graph[1000];//각각의 레인의 확률 배열 
	int g;//각 레인의 확률을 정수로 반올림 
	printf("\n");
	printf("\n\t\t\t\t\t\t\t<사다리타기 결과>\n\n");
	for (int i=0;i<=lane-1;i++){ //출력 확인 
		sum = sum +last[i];//시뮬레이션 총 횟수 
	}
	//printf("\n%d\n",sum);// 출력 확인 
	for (int i=0;i<=lane-1;i++){ //출력 확인 
		graph[i]=(double) last[i]/sum*100; //확률 배열 생성
		printf(" %2d번 레인 : %5.2f%%   ",i+1,graph[i]);
		g =int(graph[i]+0.5);//반올림 
		for (int i=1;i<=g;i++){//막대 그래프 그림 
			printf("■");
		}
		printf("\n");
	}
	for (int i=1;i<=lane;i++){//확률이 가장 높은 레인을 찾음 
		if (max<=graph[i]){
			max=graph[i];
			max_i=i;
		}
	}
	max_i++;
	printf("\n%d번 레인이 %.2f%%의 확률로 가장 높다.",max_i,max);
}
